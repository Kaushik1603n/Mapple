<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="/stylesheet/addProduct.css">

</head>

<body>
  <div id="alertBox">
  </div>
  <div class="d-flex flex-column flex-lg-row">
    <%- include("../../views/partials/admin/sidebar") %>
      <div class="container-fluid p-4">

        <div class="d-flex justify-content-between align-items-center p-2 mb-2 flex-wrap head-container ">
          <h4 class="fw-bold p-1 m-0">Add Product</h4>
        </div>
        <div class="card mt-4">
          <div class="card-body">
            <form id="product-form">
              <div class="row g-3">

                <div class="input-row">
                  <div class="col-md-6">
                    <label for="productName" class="form-label">Product Name</label>
                    <input type="text" class="form-control" name="productName" id="productName"
                      placeholder="Enter product name" />
                  </div>

                  <!-- Stock Status -->
                  <div class="col-md-6">
                    <label for="stockStatus" class="form-label">Stock Status</label>
                    <select name="stock" id="stock">
                      <option value="Available">Available</option>
                      <option value="out of stock">out of stock</option>
                      <option value="Discountinued">Discountinued</option>
                    </select>
                  </div>
                </div>

                <div class="input-row">
                  <!-- Available Quantity -->
                  <div class="col-md-6">
                    <label for="quantity" class="form-label">Available Quantity</label>
                    <input type="number" name="quantity" class="form-control" id="quantity"
                      placeholder="Enter available quantity" />
                  </div>

                  <!-- Category -->
                  <div class="col-md-6">
                    <label for="category" class="form-label">Category</label>
                    <select name="category" class="form-select" id="category">
                      <% for (let i=0; i < cat.length; i++) { %>
                        <option value="<%= cat[i].name %>">
                          <%= cat[i].name %>
                        </option>
                        <% } %>
                    </select>
                  </div>
                </div>


                <div class="input-row">
                  <div class="input-col">
                    <label for="images">Images</label>
                    <div class="file-input-container">
                      <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                          d="M4.80776 16.2858H2.41216C2.09448 16.2858 1.78982 16.1595 1.56518 15.935C1.34055 15.7104 1.21436 15.4056 1.21436 15.088V5.50557M1.21436 5.50557H16.7858M1.21436 5.50557L3.8615 1.31326C3.96393 1.13567 4.11023 0.987344 4.28641 0.882483C4.46258 0.777621 4.66271 0.719731 4.86765 0.714355H13.1325C13.3374 0.719731 13.5376 0.777621 13.7138 0.882483C13.8899 0.987344 14.0362 1.13567 14.1386 1.31326L16.7858 5.50557M16.7858 5.50557V15.088C16.7858 15.4056 16.6595 15.7104 16.4349 15.935C16.2104 16.1595 15.9056 16.2858 15.588 16.2858H13.1924M6.00552 12.0935L9.00003 9.09897M9.00003 9.09897L11.9945 12.0935M9.00003 9.09897L9.00011 16.2858M9.00011 0.714355V5.50556"
                          stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round" />
                      </svg>
                      <span>Choose product images</span>
                      <input name="images" type="file" id="file-input" class="file-input" accept="image/*" multiple>
                    </div>
                  </div>
                </div>

                <div class="input-row crop-container">
                  <div id="cropper-modal" style="display: none;">
                    <div class="cropper-container">
                      <img id="cropper-image" src="" alt="Cropper">
                    </div>
                    <button class="button" id="crop-btn">Done</button>
                    <button class="button" id="cancel-btn">Cancel</button>
                  </div>
                  <div class="image-preview-container" id="image-preview-container"></div>
                </div>

                <div class="input-row">
                  <!-- Description -->
                  <div class="col-12">
                    <label for="description" class="form-label">Description</label>
                    <textarea name="description" class="form-control" id="description"></textarea>

                  </div>
                </div>

                <div class="input-row">
                  <!-- Colors -->
                  <div class="col-md-6 color-div">
                    <label class="form-label d-block">Colors</label>
                    <div class="d-flex align-items-center color-error">
                      <div class="form-check me-2">
                        <input class="form-check-input" type="radio" name="color" id="colorDark" value="#1D2536">
                        <label class="form-check-label bg-Midnight rounded-circle" for="colorDark"
                          style="width: 20px; height: 20px;"></label>
                      </div>
                      <div class="form-check me-2">
                        <input class="form-check-input" type="radio" name="color" id="colorWarning" value="#C0C0C0">
                        <label class="form-check-label bg-silver rounded-circle" for="colorWarning"
                          style="width: 20px; height: 20px;"></label>
                      </div>
                      <div class="form-check me-2">
                        <input class="form-check-input" type="radio" name="color" id="colorSuccess" value="#D3C8A1">
                        <label class="form-check-label bg-Starlight rounded-circle" for="colorSuccess"
                          style="width: 20px; height: 20px;"></label>
                      </div>
                      <!-- <div class="form-check me-2">
                        <input class="form-check-input" type="radio" name="color" id="colorPrimary" value="gray">
                        <label class="form-check-label bg-Gray rounded-circle" for="colorPrimary"
                          style="width: 20px; height: 20px;"></label>
                      </div> -->
                    </div>
                  </div>

                  <!-- Variants -->
                  <div class="col-md-6">
                    <label class="form-label">Variants</label>
                    <div class="d-flex flex-wrap gap-2 varient-error">
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="variant" id="variant128" value="128GB">
                        <label class="form-check-label" for="variant128">128 GB</label>
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="variant" id="variant256" value="256GB">
                        <label class="form-check-label" for="variant256">256 GB</label>
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="variant" id="variant512" value="512GB">
                        <label class="form-check-label" for="variant512">512 GB</label>
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="variant" id="variant1TB" value="1TB">
                        <label class="form-check-label" for="variant1TB">1 TB</label>
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="variant" id="variant2TB" value="2TB">
                        <label class="form-check-label" for="variant2TB">2 TB</label>
                      </div>
                    </div>
                  </div>
                </div>


                <div class="input-row">
                  <div class="col-md-6">
                    <label for="processor" class="form-label">Processor</label>
                    <select class="form-select" name="processor" id="processor">
                      <option selected>M1</option>
                      <option>M2</option>
                    </select>
                  </div>

                  <div class="col-md-6">
                    <label for="offer" class="form-label">Offer %</label>
                    <input type="number" name="offer" id="offer">
                  </div>

                </div>

                <div class="input-row">
                  <div class="col-md-6">
                    <label for="price" class="form-label">Price</label>
                    <input type="number" name="price" id="price" placeholder="Enter Price">
                  </div>
                  <div class="col-md-6">
                    <label for="offerPrice" class="form-label">Offer Price</label>
                    <input type="number" name="offerPrice" id="offerPrice" placeholder="Offer Price" readonly>
                  </div>
                </div>

                <div class="input-row">
                  <button class="button" id="submit-btn" type="submit">Add Product</button>
                  <a href="/admin/products" class="button-2">Cancel</a>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script
    src="https://cdn.tiny.cloud/1/wkrfnuojdmxyunxn2g3og2f4231i3jfuc37wsauemaj2a4u4/tinymce/6/tinymce.min.js"></script>
  <script>
    tinymce.init({
      selector: '#description',
      plugins: 'lists',
      toolbar: 'bold italic | bullist numlist | undo redo',
    });

  </script>

  <script>
    const fileInput = document.getElementById('file-input');
    const imageList = document.getElementById('image-preview-container');
    const cropperModal = document.getElementById('cropper-modal');
    const cropperImage = document.getElementById('cropper-image');
    const cropButton = document.getElementById('crop-btn');
    const cancelButton = document.getElementById('cancel-btn');
    const form = document.getElementById('product-form');
    const colors = document.querySelectorAll('.color-option');
    const colorElement = document.getElementById('colors');
    const selectedColor = document.querySelector('input[name="color"]:checked');
    const selectedVariant = document.querySelector('input[name="variant"]:checked');
    const selectedColors = new Set();
    let cropper;
    const MAX_FILE_SIZE = 2 * 1024 * 1024;
    const imageArray = [];
    let currentFileIndex = 0;
    let currentFiles = [];

    if (fileInput && imageList) {
      fileInput.addEventListener('change', (event) => {
        currentFiles = Array.from(event.target.files);

        processNextFile();
      });

      function processNextFile() {
        if (currentFileIndex >= currentFiles.length) {
          currentFileIndex = 0;
          return;
        }

        const file = currentFiles[currentFileIndex];

        if (file.size > MAX_FILE_SIZE) {
          alert(`File ${file.name} exceeds the 2MB size limit.`);
          currentFileIndex++;
          processNextFile();
          return;
        }

        const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        if (!validTypes.includes(file.type)) {
          alert(`File ${file.name} is not a valid image type.`);
          currentFileIndex++;
          processNextFile();
          return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
          cropperImage.src = e.target.result;
          cropperModal.style.display = 'flex';

          cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
          });
        };

        reader.readAsDataURL(file);
      }

      cropButton.addEventListener('click', (e) => {
        e.preventDefault();
        const canvas = cropper.getCroppedCanvas();

        if (!canvas) {
          alert('Please crop the image properly.');
          return;
        }


        canvas.toBlob((blob) => {
          if (blob) {
            const url = URL.createObjectURL(blob);
            addImage(url, blob);
          }

          currentFileIndex++;
          processNextFile();
        });

        cropper.destroy();
        cropperModal.style.display = 'none';
      });

      cancelButton.addEventListener('click', (e) => {
        e.preventDefault();

        cropper.destroy();
        cropperModal.style.display = 'none';

        currentFileIndex++;
        processNextFile();
      });

      function addImage(imageUrl, file) {
        imageArray.push({ imageUrl, file });
        renderImages();
      }

      function renderImages() {
        imageList.innerHTML = '';
        imageArray.forEach((imageData, index) => {
          const imageItem = document.createElement('div');
          imageItem.classList.add('image-item');

          const imgElement = document.createElement('img');
          imgElement.src = imageData.imageUrl;
          imgElement.alt = 'Uploaded image';
          imageItem.appendChild(imgElement);

          const removeButton = document.createElement('button');
          removeButton.classList.add('remove-btn');
          removeButton.innerHTML = 'X';
          removeButton.addEventListener('click', () => removeImage(index));
          imageItem.appendChild(removeButton);

          imageList.appendChild(imageItem);
        });
      }

      function removeImage(index) {
        imageArray.splice(index, 1);
        renderImages();
      }

      function removeFromFormData(formData, keyToRemove) {
        const newFormData = new FormData();

        for (let [key, value] of formData.entries()) {
          if (key !== keyToRemove) {
            newFormData.append(key, value);
          }
        }

        return newFormData;
      }

      function blobToFile(blob, fileName) {
        return new File([blob], fileName, { type: blob.type });
      }

      form.addEventListener('submit', (e) => {
        e.preventDefault();
        let validForm = true;
      
        document.querySelectorAll('.error-message').forEach(msg => msg.remove());

        // Helper function to show error messages
        function showError(element, message) {
          const error = document.createElement('span');
          error.className = 'error-message';
          error.style.color = 'red';
          error.innerText = message;
          element.parentElement.appendChild(error);
          element.focus();
        }

        // Validate Product Name
        let productName = document.getElementById('productName');
        if (productName.value.trim() === "") {
          showError(productName, "Product name is required.");
          validForm = false;
        }

        // Validate Stock Status
        let stockStatus = document.getElementById('stock');
        if (!stockStatus.value) {
          showError(stockStatus, "Stock status is required.");
          validForm = false;
        }

        // Validate Available Quantity
        let quantity = document.getElementById('quantity');
        if (quantity.value.trim() === "" || parseInt(quantity.value) <= 0) {
          showError(quantity, "Available quantity must be a positive number.");
          validForm = false;
        }

        // Validate Category
        let category = document.getElementById('category');
        if (!category.value) {
          showError(category, "Please select a category.");
          validForm = false;
        }

        // Validate Processor
        let processor = document.getElementById('processor');
        if (!processor.value) {
          showError(processor, "Please select a processor.");
          validForm = false;
        }

        // Validate Description
        let description = document.getElementById('description');
        if (description.value.trim() === "") {
          showError(description, "Description is required.");
          validForm = false;
        }

        // Validate Images
        let fileInput = document.getElementById('file-input');
        if (imageArray.length < 3) { // Ensure imageArray is defined and populated
          showError(fileInput, "Please upload at least 3 images.");
          validForm = false;
        }

        // Validate Colors
        const colorContainer = document.querySelector('.color-error'); // Target the container
        const selectedColor = document.querySelector('input[name="color"]:checked');
        if (!selectedColor) {
          showError(colorContainer, "Please select a color.");
          validForm = false;
        }

        // Validate Variants
        const variantContainer = document.querySelector('.varient-error'); // Target the container
        const selectedVariant = document.querySelector('input[name="variant"]:checked');
        if (!selectedVariant) {
          showError(variantContainer, "Please select a variant.");
          validForm = false;
        }

        let offer = document.getElementById('offer');
        if (offer.value.trim() === "" || parseInt(offer.value) <= 0) {
          showError(offer, "offer must be a positive number");
          validForm = false;
        }
        let price = document.getElementById('price');
        if (price.value.trim() === "" || parseInt(price.value) <= 0) {
          showError(price, "Price must be a positive number.");
          validForm = false;
        }



        // Final Submission
        if (!validForm) {
          alert("Please correct the errors before submitting the form.");
          return;
        }
        // Proceed with form submission or further processing
        console.log("Form validated and ready for submission.");


        if (!validForm) return;
        const formData = removeFromFormData(new FormData(form), 'images');
        imageArray.forEach((imageData, index) => {
          formData.append("images", blobToFile(imageData.file, imageData.file.name || `cropped - ${index}.jpg`));
        });

        console.log(formData);

        fetch('/admin/addProduct', {
          method: 'POST',
          body: formData,
        })
          .then((response) => {
            if (response.ok) {
              return response.json();
            }
            throw new Error('Failed to fetch');
          })
          .then((data) => {
            if (data.success) {
              // alert_success(data.message);
              showAlert(data.message, "success")
              setTimeout(() => {
                window.location.reload();
              }, 3100);
            } else {
              // alert(data.message);
              console.log(data.message);

              showAlert(data.message, "danger")
            }

          })
          .catch((error) => {
            console.error('Fetch error:', error);
          });
      });
    }
    function showAlert(message, type) {

      const alertBox = document.createElement('div');
      alertBox.id = 'alertBox';
      alertBox.className = `alert alert-${type} show`;
      alertBox.role = 'alert';
      alertBox.innerHTML = message;
      document.body.appendChild(alertBox);
      setTimeout(() => {
        alertBox.classList.remove('show');
        alertBox.classList.add('hide');
        setTimeout(() => alertBox.remove(), 700);
      }, 3000);
    }


    //offer price section

    document.getElementById('price').addEventListener('input', calculateOfferPrice);
    document.getElementById('offer').addEventListener('input', calculateOfferPrice);

    function calculateOfferPrice() {
      const price = parseFloat(document.getElementById('price').value) || 0;
      const offer = parseFloat(document.getElementById('offer').value) || 0;

      const offerPrice = price - (price * (offer / 100));
      document.getElementById('offerPrice').value = offerPrice.toFixed(0);
    }
    calculateOfferPrice()

  </script>
</body>

</html>