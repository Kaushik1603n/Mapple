<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheet/dashboard.css">
</head>

<body class="bg-light">
    <div class="d-flex flex-column flex-lg-row">
        <!-- Sidebar -->
        <%- include("../../views/partials/admin/sidebar") %>

            <!-- Main Content -->
            <div class="container-fluid p-4 bg-light">
                <!-- Header Section -->
                <%- include("../../views/partials/admin/header") %>


                    <div class="row">
                        <!-- Cards -->
                        <div class="col-md-6">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title">Top 4 Products</h5>
                                    <ul class="list-group">
                                        <% top4Product.forEach(product=> { %>
                                            <li
                                                class="list-group-item d-flex justify-content-between align-items-center">
                                                <%= product.productName %>
                                                    <%= product.variant %> <!-- Add product name or ID -->
                                                        <div style="width: 62%; margin-left: 10px;">
                                                            <div class="progress">
                                                                <div class="progress-bar" role="progressbar"
                                                                    style="width: <%= product.percentage %>%;  background-color: #464545"
                                                                    aria-valuenow="<%= product.percentage %>"
                                                                    aria-valuemin="0" aria-valuemax="100">
                                                                </div>
                                                                <span class="px-1">
                                                                    <%= product.percentage %>%
                                                                </span>
                                                            </div>
                                                        </div>
                                            </li>
                                            <% }) %>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card text-center">
                                <div class="card-body">
                                    <% if(top4Category) { %>
                                    <h5 class="card-title">Top <%= top4Category.length %> Categories</h5>
                                    <% } %>
                                    <ul class="list-group">
                                        <% top4Category.forEach(category=> { %>
                                            <li
                                                class="list-group-item d-flex justify-content-between align-items-center">
                                                <%= category.category.name %>
                                                    <div style="width: 70%; margin-left: 10px;">
                                                        <div class="progress">
                                                            <div class="progress-bar" role="progressbar"
                                                                style="width: <%= category.percentage %>%;  background-color: #464545"
                                                                aria-valuenow="<%= category.percentage %>"
                                                                aria-valuemin="0" aria-valuemax="100">
                                                            </div>
                                                            <span class="px-1">
                                                                <%= category.percentage %>%
                                                            </span>
                                                        </div>
                                                    </div>
                                            </li>
                                            <% }) %>
                                    </ul>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Table -->
                    <div class="row mt-5">
                        <div class="col-md-12">
                            <h5>Sales and Discount Overview</h5>
                            <select id="time-filter" class="form-control mb-3">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                            <canvas id="combinedChart"></canvas>
                        </div>
                    </div>

                    <div class="container my-5">
                        <div class="ledger-section bg-light p-4 rounded shadow-sm">
                            <h3 class="text-center text-dark mb-4">Ledger Book</h3>
                            <div class="d-flex justify-content-between mb-3">
                                <button class="btn btn-secondary" onclick="fetchLedgerData()">Generate Ledger</button>
                                <div>
                                    <button class="btn btn-success me-2" onclick="downloadExcel()">Download
                                        Excel</button>
                                    <button class="btn btn-danger" onclick="downloadPDF()">Download PDF</button>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover" id="ledgerTable">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Year</th>
                                            <th>Month</th>
                                            <th>Total Sales</th>
                                        </tr>
                                    </thead>
                                    <tbody id="ledgerTableBody">
                                        <!-- Ledger data will be dynamically inserted here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>




            </div>
    </div>
    <!-- <script src="/js/admin/dashboard.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>
     
        const timeFilter = document.getElementById('time-filter');
        const combinedChartCanvas = document.getElementById('combinedChart');

        // Initialize Combined Chart
        let combinedChart = new Chart(combinedChartCanvas, {
            type: 'line',
            data: {
                labels: [], // Labels will be dynamically set
                datasets: [
                    {
                        label: 'Total Sales',
                        data: [], // Data will be dynamically set
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: true,
                    },
                    {
                        label: 'Total Discount',
                        data: [], // Data will be dynamically set
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        fill: true,
                    },
                ],
            },
            options: {
                responsive: true,
                scales: {
                    x: { // Time-related axis
                        ticks: { beginAtZero: true },
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        });

        async function fetchSalesAndDiscountData(filter) {
            // Fetch both sales and discount data concurrently
            const [salesResponse, discountResponse] = await Promise.all([
                fetch(`/admin/sales-data?filter=${filter}`),
                fetch(`/admin/discount-data?filter=${filter}`),
            ]);

            // Parse responses as JSON
            const salesData = await salesResponse.json();
            const discountData = await discountResponse.json();

            // Prepare chart labels based on the filter type
            let labels = [];
            if (filter === 'daily') {
                labels = salesData.map(data => `Day ${data._id.dayOfYear}`);
            } else if (filter === 'weekly') {
                labels = salesData.map(data => `Week ${data._id.isoWeek}`);
            } else if (filter === 'monthly') {
                labels = salesData.map(data => `${data._id.year} Month ${data._id.month}`);
            } else if (filter === 'yearly') {
                labels = salesData.map(data => `Year ${data._id}`);
            }

            // Extract data for sales and discounts
            const sales = salesData.map(data => data.totalSales);
            const discounts = discountData.map(data => data.totalDiscount);

            // Update chart
            combinedChart.data.labels = labels;
            combinedChart.data.datasets[0].data = sales; // Total Sales
            combinedChart.data.datasets[1].data = discounts; // Total Discounts
            combinedChart.update();
        }

        // Initial data fetch for 'daily'
        fetchSalesAndDiscountData('daily');

        // Listen for filter changes and update chart
        timeFilter.addEventListener('change', (e) => {
            fetchSalesAndDiscountData(e.target.value);
        });


    </script>
    <script>
        async function fetchLedgerData() {
            try {
                const response = await fetch("/admin/ledger-data");
                if (!response.ok) throw new Error("Failed to fetch ledger data");

                const ledgerData = await response.json();

                // Process and display data
                console.log(ledgerData);
                renderLedgerTable(ledgerData);
            } catch (error) {
                console.error("Error fetching ledger data:", error);
            }
        }

        function renderLedgerTable(data) {
            const table = document.getElementById("ledgerTableBody");
            table.innerHTML = "";

            data.forEach((entry) => {
                const row = document.createElement("tr");

                const yearCell = document.createElement("td");
                yearCell.textContent = entry._id.year;

                const monthCell = document.createElement("td");
                monthCell.textContent = new Date(0, entry._id.month - 1).toLocaleString(
                    "en-US",
                    { month: "long" }
                );

                const salesCell = document.createElement("td");
                salesCell.textContent = entry.totalSales.toFixed(2);

                row.appendChild(yearCell);
                row.appendChild(monthCell);
                row.appendChild(salesCell);

                table.appendChild(row);
            });
        }

        function downloadExcel() {
            const table = document.getElementById('ledgerTable');
            const wb = XLSX.utils.table_to_book(table, { sheet: 'Ledger Book' });
            XLSX.writeFile(wb, 'LedgerBook.xlsx');
        }

        async function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Add title
            doc.setFontSize(18);
            doc.text('Ledger Book', 105, 10, { align: 'center' });

            // Get table element
            const table = document.getElementById('ledgerTable');

            // Convert table to data
            const data = [];
            const rows = table.querySelectorAll('tr');
            rows.forEach(row => {
                const cols = row.querySelectorAll('th, td');
                const rowData = [];
                cols.forEach(col => rowData.push(col.innerText));
                data.push(rowData);
            });

            doc.autoTable({
                head: [data[0]], // First row as header
                body: data.slice(1), // Rest of the rows as body
                startY: 20,
            });

            // Save PDF
            doc.save('LedgerBook.pdf');
        }


    </script>


</body>

</html>